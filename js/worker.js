// Generated by CoffeeScript 1.6.3
var $, STOP_WORDS_EN, console, extendFunction, funs, handleExecute, self;

$ = {
  trim: function(data) {
    return data.trim();
  }
};

STOP_WORDS_EN = ['a', 'able', 'about', 'across', 'after', 'all', 'almost', 'also', 'am', 'among', 'an', 'and', 'any', 'are', 'as', 'at', 'be', 'because', 'been', 'but', 'by', 'can', 'cannot', 'could', 'dear', 'did', 'do', 'does', 'either', 'else', 'ever', 'every', 'for', 'from', 'get', 'got', 'had', 'has', 'have', 'he', 'her', 'hers', 'him', 'his', 'how', 'however', 'i', 'if', 'in', 'into', 'is', 'it', 'its', 'just', 'least', 'let', 'like', 'likely', 'may', 'me', 'might', 'most', 'must', 'my', 'neither', 'no', 'nor', 'not', 'of', 'off', 'often', 'on', 'only', 'or', 'other', 'our', 'own', 'rather', 'said', 'say', 'says', 'she', 'should', 'since', 'so', 'some', 'than', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'tis', 'to', 'too', 'twas', 'us', 'wants', 'was', 'we', 'were', 'what', 'when', 'where', 'which', 'while', 'who', 'whom', 'why', 'will', 'with', 'would', 'yet', 'you', 'your'];

funs = [];

self = this;

console = {
  log: function(data) {
    return postMessage({
      console: data
    });
  }
};

extendFunction = function(body) {
  var f;
  f = new Function(body);
  f.prototype.mapResult = {};
  f.prototype.reduceResult = [];
  f.prototype.emit = function(key, value) {
    if (!this.mapResult[key]) {
      this.mapResult[key] = [];
    }
    return this.mapResult[key].push(value);
  };
  f.prototype.wrapMap = function(data) {
    var end, l, start, _i, _len;
    start = new Date().getTime();
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      l = data[_i];
      this.map(l);
      end = new Date().getTime();
    }
    return postMessage("Map -> " + (end - start) + "ms / " + data.length + "<br/>");
  };
  f.prototype.wrapReduce = function() {
    var end, k, result, start, v;
    start = new Date().getTime();
    result = (function() {
      var _ref, _results;
      _ref = this.mapResult;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(this.reduce(k, v));
      }
      return _results;
    }).call(this);
    end = new Date().getTime();
    postMessage("Reduce -> " + (end - start) + "ms /  " + (Object.keys(this.mapResult).length) + "</br>");
    return result;
  };
  f.prototype.execute = function(data) {
    this.wrapMap(data);
    return this.wrapReduce();
  };
  return f;
};

handleExecute = function(data) {
  var a, f, tmp, _i, _j, _len, _len1, _ref;
  funs = [];
  _ref = data.funs;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    f = _ref[_i];
    funs.push(extendFunction(f));
  }
  tmp = data.data;
  for (_j = 0, _len1 = funs.length; _j < _len1; _j++) {
    f = funs[_j];
    postMessage("Calling MR Cycle<br/>");
    a = (new f()).execute(tmp);
    tmp = a;
  }
  postMessage("Finalizing...<br/>");
  return postMessage(tmp);
};

this.addEventListener("message", function(e) {
  var data;
  postMessage("Received execute...<br/>");
  data = e.data;
  switch (data.cmd) {
    case "execute":
      handleExecute(data);
  }
  return false;
});
